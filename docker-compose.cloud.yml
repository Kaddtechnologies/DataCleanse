version: '3.8'

services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://mdm_user:mdm_password123@postgres:5432/mdm_dedup
      - NEXT_PUBLIC_API_BASE_URL=https://datacleanse.sliplane.app
      - AZURE_OPENAI_ENDPOINT=${AZURE_OPENAI_ENDPOINT}
      - AZURE_OPENAI_API_KEY=${AZURE_OPENAI_API_KEY}
      - AZURE_OPENAI_API_VERSION=${AZURE_OPENAI_API_VERSION}
      - AZURE_OPENAI_DEPLOYMENT_NAME=${AZURE_OPENAI_DEPLOYMENT_NAME}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - NEXT_PUBLIC_FEATURE_AI_RULES=true
      - NEXT_PUBLIC_FEATURE_ERP_INTEGRATION=true
      - NEXT_PUBLIC_FEATURE_DATA_QUALITY=true
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - mdm-cloud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "https://datacleanse.sliplane.app/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s 

  postgres:
    image: pgvector/pgvector:pg16
    container_name: mdm-postgres-cloud
    environment:
      POSTGRES_DB: mdm_dedup
      POSTGRES_USER: mdm_user
      POSTGRES_PASSWORD: mdm_password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
    ports:
      - "5432:5432"
    volumes:
      - postgres_cloud_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init-db.sql
    networks:
      - mdm-cloud-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mdm_user -d mdm_dedup"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: mdm-redis-cloud
    ports:
      - "6379:6379"
    volumes:
      - redis_cloud_data:/data
    networks:
      - mdm-cloud-network
    restart: unless-stopped
    command: redis-server --appendonly yes

volumes:
  postgres_cloud_data:
    driver: local
  redis_cloud_data:
    driver: local

networks:
  mdm-cloud-network:
    driver: bridge 